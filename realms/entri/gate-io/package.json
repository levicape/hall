{
  "name": "@levicape/hall-gate-io",
  "description": "Authentication OIDC protocol & session management",
  "version": "0.0.0-local.0",
  "author": "Pedro Cardona",
  "config": {
    "packagemanager": "pnpm",
    "packageexecutor": "pnpm exec",
    "packagescript": "pnpm run",
    "binspork": "pnpm exec spork",
    "binatlas": "node module/http/Atlas.mjs",
    "outpath": "./module",
    "srcpaths": "./src",
    "lintpaths": "./src",
    "i18n": "./src/_i18n",
    "protocols": "./src/_protocols",
    "models": "./src/_models",
    "server": "module/http/HonoApp.mjs",
    "httpcanary": "module/canary/Http.mjs",
    "port": "64128"
  },
  "dependencies": {
    "@bufbuild/protobuf": "catalog:protobuf",
    "@levicape/paloma": "catalog:",
    "@levicape/spork": "catalog:",
    "@levicape/spork-atlas": "catalog:",
    "effect": "catalog:effect",
    "hono": "catalog:hono",
    "http-status-codes": "catalog:http",
    "std-env": "catalog:runtime-env",
    "ts-proto": "catalog:protobuf",
    "ulidx": "catalog:id",
    "verror": "catalog:error",
    "zod": "catalog:schema-zod"
  },
  "devDependencies": {
    "@biomejs/biome": "catalog:lint",
    "@types/node": "catalog:types",
    "@types/verror": "catalog:types",
    "publint": "catalog:package",
    "ts-proto": "catalog:protobuf",
    "typescript": "catalog:dev"
  },
  "engines": {
    "node": "22"
  },
  "exports": {
    "./*": "./module/*.mjs",
    "./module/_protocols/*": "./module/_protocols/*"
  },
  "files": [
    "module",
    "output"
  ],
  "license": "AGPL-3.0-only",
  "nx": {
    "targets": {
      "build:module": {
        "dependsOn": [
          "build:tsc"
        ]
      },
      "build:tsc": {
        "dependsOn": [
          "generate:protocols"
        ]
      },
      "dx:precommit": {
        "dependsOn": [
          "dx:prepublish",
          "dx:test"
        ]
      },
      "dx:prepublish": {
        "dependsOn": [
          "dx:lint"
        ]
      },
      "dx:lint": {
        "dependsOn": [
          "nx:compile",
          "lint:format",
          "package:format"
        ]
      },
      "dx:test": {
        "dependsOn": [
          "dx:lint",
          "nx:test"
        ]
      },
      "nx:clean": {
        "dependsOn": [
          "clean:module"
        ]
      },
      "nx:compile": {
        "dependsOn": [
          "build:module"
        ]
      },
      "nx:test": {
        "dependsOn": [
          "test:module"
        ]
      },
      "test:module": {
        "dependsOn": [
          "build:module"
        ]
      }
    }
  },
  "private": true,
  "publishConfig": {
    "registry": "https://npm.pkg.github.com/"
  },
  "repository": "github:levicape/hall",
  "scripts": {
    "atlas": "$npm_package_config_binatlas",
    "build": "$npm_package_config_packageexecutor nx nx:compile",
    "build:tsc": "$npm_package_config_packageexecutor tsc",
    "clean": "$npm_package_config_packageexecutor nx nx:clean --verbose --no-cloud",
    "clean:modules": "rm -rf $npm_package_config_modulepath",
    "dx:precommit": "$npm_package_config_packageexecutor nx dx:precommit:pre && $npm_package_config_packageexecutor nx package:deps",
    "dx:precommit:pre": "echo \"Starting precommit dx. This will check package.json dependencies.\"",
    "dx:prepublish": "$npm_package_config_packageexecutor nx dx:lint && $npm_package_config_packageexecutor nx prepublishOnly",
    "dx:prepublish:pre": "echo \"Starting prepublish dx. This will compile the package, lint it, format package.json and verify all exports are valid. \"",
    "dx:test": "$npm_package_config_packagescript clean && $npm_package_config_packagescript build && $npm_package_config_packagescript test",
    "generate:protocols": "NODE_NO_WARNINGS=1 NPM_CONFIG_UPDATE_NOTIFIER=false $npm_package_config_packageexecutor spork code gen --root \"../../../protocols\" --command \"$(which $npm_package_config_packagemanager) --silent run build\" --artifact gen --destination $npm_package_config_protocols --clean",
    "http:canary": "node $npm_package_config_httpcanary",
    "http:dev": "rm nohup.out || true; nohup $npm_package_config_packageexecutor tsc -w & echo $! > .pidfile.tsc && LOG_LEVEL=5 pnpm run http:start --watch module; kill $(cat .pidfile.tsc) || true; rm -f .pidfile.tsc || true",
    "http:start": "$npm_package_config_binspork server start $npm_package_config_server --port ${PORT:-64128}",
    "lint": "$npm_package_config_packageexecutor biome check $npm_package_config_srcpaths",
    "lint:format": "$npm_package_config_packageexecutor biome check --write $npm_package_config_srcpaths",
    "lint:unsafe": "$npm_package_config_packageexecutor biome check --write --unsafe $npm_package_config_srcpaths",
    "package:deps": "$npm_package_config_packageexecutor depcheck",
    "package:fix": "$npm_package_config_packageexecutor syncpack fix-mismatches",
    "package:format": "$npm_package_config_packageexecutor syncpack format",
    "package:update": "$npm_package_config_packageexecutor syncpack update",
    "precommit": "$npm_package_config_packageexecutor nx dx:prepublish  --verbose --no-cloud",
    "predx:lint": "$npm_package_config_packageexecutor nx clean",
    "prelint": "$npm_package_config_packageexecutor biome format $npm_package_config_lintpaths",
    "prepublishOnly": "$npm_package_config_packageexecutor publint --strict",
    "start": "$npm_package_config_packageexecutor spork server start $npm_package_config_server --port $PORT",
    "test": "$npm_package_config_packageexecutor nx nx:test --verbose --no-cloud",
    "test:module": "echo 'node --test  \"module/**/*.test.js\"'"
  },
  "type": "module"
}
