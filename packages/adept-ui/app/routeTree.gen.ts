/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root.js';
import { Route as AuthedImport } from './routes/_authed.js';
import { Route as IndexImport } from './routes/index.js';
import { Route as AuthedWelcomeImport } from './routes/_authed/welcome.js';
import { Route as marketingTosImport } from './routes/(marketing)/tos.js';
import { Route as marketingSupportImport } from './routes/(marketing)/support.js';
import { Route as marketingPrivacyImport } from './routes/(marketing)/privacy.js';
import { Route as marketingAboutImport } from './routes/(marketing)/about.js';
import { Route as authSignupImport } from './routes/(auth)/signup.js';
import { Route as authLogoutImport } from './routes/(auth)/logout.js';
import { Route as authLoginImport } from './routes/(auth)/login.js';
import { Route as marketingLogosLogosImport } from './routes/(marketing)/logos/logos.js';

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const AuthedWelcomeRoute = AuthedWelcomeImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => AuthedRoute,
} as any);

const marketingTosRoute = marketingTosImport.update({
  id: '/(marketing)/tos',
  path: '/tos',
  getParentRoute: () => rootRoute,
} as any);

const marketingSupportRoute = marketingSupportImport.update({
  id: '/(marketing)/support',
  path: '/support',
  getParentRoute: () => rootRoute,
} as any);

const marketingPrivacyRoute = marketingPrivacyImport.update({
  id: '/(marketing)/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any);

const marketingAboutRoute = marketingAboutImport.update({
  id: '/(marketing)/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any);

const authSignupRoute = authSignupImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any);

const authLogoutRoute = authLogoutImport.update({
  id: '/(auth)/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any);

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

const marketingLogosLogosRoute = marketingLogosLogosImport.update({
  id: '/(marketing)/logos/logos',
  path: '/logos/logos',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_authed': {
      id: '/_authed';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthedImport;
      parentRoute: typeof rootRoute;
    };
    '/(auth)/login': {
      id: '/(auth)/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof authLoginImport;
      parentRoute: typeof rootRoute;
    };
    '/(auth)/logout': {
      id: '/(auth)/logout';
      path: '/logout';
      fullPath: '/logout';
      preLoaderRoute: typeof authLogoutImport;
      parentRoute: typeof rootRoute;
    };
    '/(auth)/signup': {
      id: '/(auth)/signup';
      path: '/signup';
      fullPath: '/signup';
      preLoaderRoute: typeof authSignupImport;
      parentRoute: typeof rootRoute;
    };
    '/(marketing)/about': {
      id: '/(marketing)/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof marketingAboutImport;
      parentRoute: typeof rootRoute;
    };
    '/(marketing)/privacy': {
      id: '/(marketing)/privacy';
      path: '/privacy';
      fullPath: '/privacy';
      preLoaderRoute: typeof marketingPrivacyImport;
      parentRoute: typeof rootRoute;
    };
    '/(marketing)/support': {
      id: '/(marketing)/support';
      path: '/support';
      fullPath: '/support';
      preLoaderRoute: typeof marketingSupportImport;
      parentRoute: typeof rootRoute;
    };
    '/(marketing)/tos': {
      id: '/(marketing)/tos';
      path: '/tos';
      fullPath: '/tos';
      preLoaderRoute: typeof marketingTosImport;
      parentRoute: typeof rootRoute;
    };
    '/_authed/welcome': {
      id: '/_authed/welcome';
      path: '/welcome';
      fullPath: '/welcome';
      preLoaderRoute: typeof AuthedWelcomeImport;
      parentRoute: typeof AuthedImport;
    };
    '/(marketing)/logos/logos': {
      id: '/(marketing)/logos/logos';
      path: '/logos/logos';
      fullPath: '/logos/logos';
      preLoaderRoute: typeof marketingLogosLogosImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedWelcomeRoute: typeof AuthedWelcomeRoute;
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedWelcomeRoute: AuthedWelcomeRoute,
};

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof AuthedRouteWithChildren;
  '/login': typeof authLoginRoute;
  '/logout': typeof authLogoutRoute;
  '/signup': typeof authSignupRoute;
  '/about': typeof marketingAboutRoute;
  '/privacy': typeof marketingPrivacyRoute;
  '/support': typeof marketingSupportRoute;
  '/tos': typeof marketingTosRoute;
  '/welcome': typeof AuthedWelcomeRoute;
  '/logos/logos': typeof marketingLogosLogosRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof AuthedRouteWithChildren;
  '/login': typeof authLoginRoute;
  '/logout': typeof authLogoutRoute;
  '/signup': typeof authSignupRoute;
  '/about': typeof marketingAboutRoute;
  '/privacy': typeof marketingPrivacyRoute;
  '/support': typeof marketingSupportRoute;
  '/tos': typeof marketingTosRoute;
  '/welcome': typeof AuthedWelcomeRoute;
  '/logos/logos': typeof marketingLogosLogosRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_authed': typeof AuthedRouteWithChildren;
  '/(auth)/login': typeof authLoginRoute;
  '/(auth)/logout': typeof authLogoutRoute;
  '/(auth)/signup': typeof authSignupRoute;
  '/(marketing)/about': typeof marketingAboutRoute;
  '/(marketing)/privacy': typeof marketingPrivacyRoute;
  '/(marketing)/support': typeof marketingSupportRoute;
  '/(marketing)/tos': typeof marketingTosRoute;
  '/_authed/welcome': typeof AuthedWelcomeRoute;
  '/(marketing)/logos/logos': typeof marketingLogosLogosRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/about'
    | '/privacy'
    | '/support'
    | '/tos'
    | '/welcome'
    | '/logos/logos';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/about'
    | '/privacy'
    | '/support'
    | '/tos'
    | '/welcome'
    | '/logos/logos';
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/(auth)/login'
    | '/(auth)/logout'
    | '/(auth)/signup'
    | '/(marketing)/about'
    | '/(marketing)/privacy'
    | '/(marketing)/support'
    | '/(marketing)/tos'
    | '/_authed/welcome'
    | '/(marketing)/logos/logos';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthedRoute: typeof AuthedRouteWithChildren;
  authLoginRoute: typeof authLoginRoute;
  authLogoutRoute: typeof authLogoutRoute;
  authSignupRoute: typeof authSignupRoute;
  marketingAboutRoute: typeof marketingAboutRoute;
  marketingPrivacyRoute: typeof marketingPrivacyRoute;
  marketingSupportRoute: typeof marketingSupportRoute;
  marketingTosRoute: typeof marketingTosRoute;
  marketingLogosLogosRoute: typeof marketingLogosLogosRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authLogoutRoute: authLogoutRoute,
  authSignupRoute: authSignupRoute,
  marketingAboutRoute: marketingAboutRoute,
  marketingPrivacyRoute: marketingPrivacyRoute,
  marketingSupportRoute: marketingSupportRoute,
  marketingTosRoute: marketingTosRoute,
  marketingLogosLogosRoute: marketingLogosLogosRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/(auth)/login",
        "/(auth)/logout",
        "/(auth)/signup",
        "/(marketing)/about",
        "/(marketing)/privacy",
        "/(marketing)/support",
        "/(marketing)/tos",
        "/(marketing)/logos/logos"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/welcome"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/logout": {
      "filePath": "(auth)/logout.tsx"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx"
    },
    "/(marketing)/about": {
      "filePath": "(marketing)/about.tsx"
    },
    "/(marketing)/privacy": {
      "filePath": "(marketing)/privacy.tsx"
    },
    "/(marketing)/support": {
      "filePath": "(marketing)/support.tsx"
    },
    "/(marketing)/tos": {
      "filePath": "(marketing)/tos.tsx"
    },
    "/_authed/welcome": {
      "filePath": "_authed/welcome.tsx",
      "parent": "/_authed"
    },
    "/(marketing)/logos/logos": {
      "filePath": "(marketing)/logos/logos.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
